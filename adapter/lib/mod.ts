import {serveDir, serveFile} from '@std/http/file-server';
import {dirname, extname, join} from '@std/path';

// these relative imports are generated by the adapter in the build step
import {Server as KitServer} from './server/index.js';
import {manifest} from './server/manifest.js';
const kitServer = new KitServer(manifest);

interface ServerOptions {
  kit?: {
    // the key/value pair of environment variables handed to svelte kit server
    env?: Record<string, string>
  }
}

class Server {
  #options: ServerOptions
  #server?: Deno.HttpServer
  #prerendered: Set<string>
  #appDir: string
  #baseDir: string
  #rootDir: string
  #kitServerInitialized: Promise<void>

  constructor(options?: ServerOptions) {
    this.#options = options ?? {}
    this.#prerendered = new Set(PRERENDERED);
    this.#appDir = 'APP_DIR';
    this.#baseDir = dirname(new URL(import.meta.url).pathname);
    this.#rootDir = join(this.#baseDir, 'static');
  }

  start() {
    const env = this.#options?.kit?.env ?? Deno.env.toObject()
    this.#kitServerInitialized = kitServer.init({ env })


    this.#server = Deno.serve(this.#handle_request)
  }

  get status() {
    return this.#server?.finished
  }

  async shutdown() {
    if (this.#server === undefined) {
      throw new Error("Server has not been started yet")
    }
    await this.#server.shutdown()
  }

  #handle_request = async (request: Request, info: Deno.ServeHandlerInfo): Promise<Response> => {
    // Get client IP address
    const clientAddress = request.headers.get('x-forwarded-for') ?? info.remoteAddr.hostname;

    const {pathname} = new URL(request.url);

    // Path has trailing slash
    const slashed = pathname.at(-1) === '/';

    // Handle trailing slash redirects for prerendered routes
    const location = slashed ? pathname.slice(0, -1) : `${pathname}/`;
    if (this.#prerendered.has(location)) {
      return new Response(null, {
        status: 308,
        statusText: 'Permanent Redirect',
        headers: {
          location
        }
      });
    }

    // Try prerendered route with html extension
    if (!slashed && !extname(pathname) && this.#prerendered.has(pathname)) {
      const response = await serveFile(
        request,
        join(this.#rootDir, `${pathname}.html`)
      );
      if (response.ok || response.status === 304) {
        return response;
      }
    }

    // Try static files (ignore redirects and errors)
    const response = await serveDir(request, {
      fsRoot: this.#rootDir,
      quiet: true
    });
    if (response.ok || response.status === 304) {
      if (
        pathname.startsWith(`/${this.#appDir}/immutable/`) &&
        response.status === 200
      ) {
        response.headers.set(
          'cache-control',
          'public, max-age=31536000, immutable'
        );
      }
      return response;
    }

    // Pass to the SvelteKit server
    await this.#kitServerInitialized
    return kitServer.respond(request, {
      getClientAddress: () => clientAddress
    });
  }
}


class Foo {
  math = Math
  random = Math.random
}

if (import.meta.main) {
  const server = new Server({
    kit: {
      env: {foo: 'bar', fooclass: new Foo()}
    }
  })
  console.log('start the server please')
  await server.start()
  console.log('server start finished?')
  await server.status
  console.log('server stopped')
}


export { Server }
